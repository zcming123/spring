<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
">

    <!--开启注解扫描，base-package指定扫描的包路径-->
    <context:component-scan base-package="com.lagou.edu"/>

    <!--引入外部资源文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--第三方jar中的bean定义在xml中-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--
        lazy-init：延迟加载，true代表延迟，false代表立即加载，默认是false
    -->
<!--    <bean id="lazyResult" class="com.lagou.edu.pojo.Result"   init-method="initMethod"/>-->


<!--    <bean id="companyBean" class="com.lagou.edu.factory.CompanyFactoryBean">-->
<!--        <property name="companyInfo" value="拉勾,中关村,500"/>-->
<!--    </bean>-->


    <!--进行aop相关的xml配置, 配置aop的过程其实就是把aop相关术语落地-->
    <!--
     Spring基于XML的AOP配置前期准备：
     在spring的配置⽂件中加⼊aop的约束
     xmlns:aop="http://www.springframework.org/schema/aop"
     http://www.springframework.org/schema/aop
    https://www.springframework.org/schema/aop/spring-aop.xsd

     Spring基于XML的AOP配置步骤：
     第⼀步：把通知Bean交给Spring管理
     第⼆步：使⽤aop:config开始aop的配置
     第三步：使⽤aop:aspect配置切⾯
     第四步：使⽤对应的标签配置通知的类型
     ⼊⻔案例采⽤前置通知，标签为aop:before
    -->
<!--    &lt;!&ndash;横切逻辑bean&ndash;&gt;-->
<!--    <bean id="logUtils" class="com.lagou.edu.utils.LogUtils"/>-->

<!--    &lt;!&ndash;使用config标签表明开始aop配置,在内部配置切面aspect&ndash;&gt;-->

<!--    &lt;!&ndash;aspect   =    切入点（锁定方法） + 方位点（锁定方法中的特殊时机）+ 横切逻辑 &ndash;&gt;-->
<!--    <aop:config>-->
<!--        <aop:aspect id="logAspect" ref="logUtils">-->

<!--            &lt;!&ndash;切入点锁定我们感兴趣的方法，使用 aspectj 语法表达式&ndash;&gt;-->
<!--            &lt;!&ndash;<aop:pointcut id="pt1" expression="execution(* *..*.*(..))"/>&ndash;&gt;-->
<!--            <aop:pointcut id="pt1" expression="execution(* com.lagou.edu.service.impl.TransferServiceImpl.*(..))"/>-->


<!--            &lt;!&ndash;方位信息,pointcut-ref关联切入点&ndash;&gt;-->

<!--            &lt;!&ndash;aop:before前置通知/增强&ndash;&gt;-->
<!--            <aop:before method="beforeMethod" pointcut-ref="pt1"/>-->

<!--            &lt;!&ndash;aop:after，最终通知，无论如何都执行&ndash;&gt;-->
<!--            <aop:after method="afterMethod" pointcut-ref="pt1"/>-->

<!--            &lt;!&ndash;aop:after-returnning，后置通知&ndash;&gt;-->
<!--            &lt;!&ndash;aop:after-returnning 与 aop:after-throwing 不能同时触发 &ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after-returning method="successMethod" returning="retVal" pointcut="execution(* com.lagou.edu.service.impl.TransferServiceImpl.*(..))"/>&ndash;&gt;-->
<!--            <aop:after-returning method="successMethod" returning="retVal" pointcut-ref="pt1"/>-->

<!--            &lt;!&ndash;aop:after-throwing，异常通知&ndash;&gt;-->
<!--            <aop:after-throwing method="exceptionMethod" pointcut-ref="pt1" throwing="throwable" arg-names="joinPoint,throwable"/>-->

<!--            &lt;!&ndash;环绕通知&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:around method="arroundMethod" pointcut-ref="pt1"/>&ndash;&gt;-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->


    <!--开启aop注解驱动
        proxy-target-class=true  强制使用cglib
    -->
    <aop:aspectj-autoproxy/>
</beans>
